{"version":3,"sources":["../src/index.ts","../src/maybe/nothing.ts","../src/maybe/just.ts","../src/maybe/maybe-imp.ts"],"sourcesContent":["export { default as Maybe } from './maybe/maybe-imp'\n","import type { Callback, CallbackChain, GetSafeReturn, Maybe } from './maybe'\n\nexport class Nothing implements Maybe<Nothing> {\n  private _value!: never\n\n  public orDefault<DefaultType>(defaultValue: DefaultType): DefaultType {\n    return defaultValue\n  }\n\n  public map<TransformedType>(\n    _: Callback<never, TransformedType>,\n  ): Maybe<TransformedType> {\n    return nothing()\n  }\n\n  public isNothing(): this is Nothing {\n    return true\n  }\n\n  public chain<TransformedType>(\n    _: CallbackChain<never, TransformedType>,\n  ): Maybe<TransformedType> {\n    return nothing()\n  }\n\n  public getSafe(): GetSafeReturn<never> {\n    return {\n      success: false,\n    }\n  }\n}\n\nexport function nothing(): Nothing {\n  return new Nothing()\n}\n","import type { Callback, CallbackChain, GetSafeReturn, Maybe } from './maybe'\nimport { nothing } from './nothing'\n\nexport class Just<Type> implements Maybe<Type> {\n  constructor(private _value: Type) {}\n\n  private get value() {\n    return this._value\n  }\n\n  orDefault(_: never): Type {\n    return this._value\n  }\n\n  public map<TransformedType>(\n    callbackMap: Callback<Type, TransformedType>,\n  ): Maybe<TransformedType> {\n    const result = callbackMap(this._value)\n    return this.isEmpty(result) ? nothing() : just(result)\n  }\n\n  private isEmpty(aValue: unknown): aValue is null | undefined {\n    return aValue === undefined || aValue === null\n  }\n\n  public isNothing(): boolean {\n    return false\n  }\n\n  public chain<TransformedType>(\n    callbackChain: CallbackChain<Type, TransformedType>,\n  ): Maybe<TransformedType> {\n    const result = callbackChain(this._value)\n    return this.isEmpty(result) ? nothing() : result\n  }\n\n  public getSafe(): GetSafeReturn<Type> {\n    return {\n      success: true,\n      data: this.value,\n    }\n  }\n}\n\nexport function just<Type>(value: Type): Just<Type> {\n  return new Just(value)\n}\n","import type { Maybe } from './maybe'\nimport { just } from './just'\nimport { nothing } from './nothing'\n\nexport default class MaybeImp {\n  public static of<Type>(value: Type): Maybe<Type> {\n    return just<Type>(value)\n  }\n\n  public static empty<Type>(): Maybe<Type> {\n    return nothing()\n  }\n}\n"],"mappings":"yaAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,WAAAE,IAAA,eAAAC,EAAAH,GCEO,IAAMI,EAAN,KAAwC,CAGtC,UAAuBC,EAAwC,CACpE,OAAOA,CACT,CAEO,IACLC,EACwB,CACxB,OAAOC,EAAQ,CACjB,CAEO,WAA6B,CAClC,MAAO,EACT,CAEO,MACLD,EACwB,CACxB,OAAOC,EAAQ,CACjB,CAEO,SAAgC,CACrC,MAAO,CACL,QAAS,EACX,CACF,CACF,EAEO,SAASA,GAAmB,CACjC,OAAO,IAAIH,CACb,CC/BO,IAAMI,EAAN,KAAwC,CAC7C,YAAoBC,EAAc,CAAd,YAAAA,CAAe,CAEnC,IAAY,OAAQ,CAClB,OAAO,KAAK,MACd,CAEA,UAAUC,EAAgB,CACxB,OAAO,KAAK,MACd,CAEO,IACLC,EACwB,CACxB,IAAMC,EAASD,EAAY,KAAK,MAAM,EACtC,OAAO,KAAK,QAAQC,CAAM,EAAIC,EAAQ,EAAIC,EAAKF,CAAM,CACvD,CAEQ,QAAQG,EAA6C,CAC3D,OAA+BA,GAAW,IAC5C,CAEO,WAAqB,CAC1B,MAAO,EACT,CAEO,MACLC,EACwB,CACxB,IAAMJ,EAASI,EAAc,KAAK,MAAM,EACxC,OAAO,KAAK,QAAQJ,CAAM,EAAIC,EAAQ,EAAID,CAC5C,CAEO,SAA+B,CACpC,MAAO,CACL,QAAS,GACT,KAAM,KAAK,KACb,CACF,CACF,EAEO,SAASE,EAAWG,EAAyB,CAClD,OAAO,IAAIT,EAAKS,CAAK,CACvB,CC1CA,IAAqBC,EAArB,KAA8B,CAC5B,OAAc,GAASC,EAA0B,CAC/C,OAAOC,EAAWD,CAAK,CACzB,CAEA,OAAc,OAA2B,CACvC,OAAOE,EAAQ,CACjB,CACF","names":["src_exports","__export","MaybeImp","__toCommonJS","Nothing","defaultValue","_","nothing","Just","_value","_","callbackMap","result","nothing","just","aValue","callbackChain","value","MaybeImp","value","just","nothing"]}