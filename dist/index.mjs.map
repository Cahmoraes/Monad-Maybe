{"version":3,"sources":["../src/maybe/index.ts"],"sourcesContent":["type Callback<InitialType, TransformedType> = (\n  value: InitialType,\n) => TransformedType\n\ntype CallbackChain<InitialType, TransformedType> = (\n  value: InitialType,\n) => Maybe<TransformedType>\n\nexport default class Maybe<InitialType> {\n  constructor(private readonly value: InitialType) {}\n\n  public static of<T>(value: T): Maybe<T> {\n    return new Maybe<T>(value)\n  }\n\n  public map<U>(callbackMap: Callback<InitialType, U>): Maybe<U> {\n    if (this.isEmpty(this.value)) return Maybe.of(null) as Maybe<U>\n    return Maybe.of(callbackMap(this.value))\n  }\n\n  private isEmpty(aValue: unknown): boolean {\n    return aValue === null || aValue === undefined\n  }\n\n  public chain<TransformedType>(\n    callbackChain: CallbackChain<InitialType, TransformedType>,\n  ): Maybe<TransformedType> {\n    const chained = this.map(callbackChain).join() as Maybe<TransformedType>\n    if (this.isEmpty(chained)) return Maybe.of(null) as Maybe<TransformedType>\n    return chained\n  }\n\n  private join(): InitialType {\n    return this.value\n  }\n\n  public getOrElse<OptionalType = InitialType>(\n    defaultValue: OptionalType,\n  ): InitialType | OptionalType {\n    return this.isEmpty(this.value) ? defaultValue : this.value\n  }\n}\n"],"mappings":"AAQA,IAAqBA,EAArB,KAAwC,CACtC,YAA6BC,EAAoB,CAApB,WAAAA,CAAqB,CAElD,OAAc,GAAMA,EAAoB,CACtC,OAAO,IAAID,EAASC,CAAK,CAC3B,CAEO,IAAOC,EAAiD,CAC7D,OAAI,KAAK,QAAQ,KAAK,KAAK,EAAUF,EAAM,GAAG,IAAI,EAC3CA,EAAM,GAAGE,EAAY,KAAK,KAAK,CAAC,CACzC,CAEQ,QAAQC,EAA0B,CACxC,OAAOA,GAAW,IACpB,CAEO,MACLC,EACwB,CACxB,IAAMC,EAAU,KAAK,IAAID,CAAa,EAAE,KAAK,EAC7C,OAAI,KAAK,QAAQC,CAAO,EAAUL,EAAM,GAAG,IAAI,EACxCK,CACT,CAEQ,MAAoB,CAC1B,OAAO,KAAK,KACd,CAEO,UACLC,EAC4B,CAC5B,OAAO,KAAK,QAAQ,KAAK,KAAK,EAAIA,EAAe,KAAK,KACxD,CACF","names":["Maybe","value","callbackMap","aValue","callbackChain","chained","defaultValue"]}