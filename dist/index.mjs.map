{"version":3,"sources":["../src/maybe/nothing.ts","../src/maybe/just.ts","../src/maybe/maybe-imp.ts"],"sourcesContent":["import type {\n  Callback,\n  CallbackChain,\n  CallbackDefaultLazy,\n  GetSafeReturn,\n  Maybe,\n} from './maybe'\n\nexport class Nothing implements Maybe<Nothing> {\n  public isNothing(): this is Nothing {\n    return true\n  }\n\n  public map<TransformedType>(\n    _: Callback<never, TransformedType>,\n  ): Maybe<TransformedType> {\n    return nothing()\n  }\n\n  public chain<TransformedType>(\n    _: CallbackChain<never, TransformedType>,\n  ): Maybe<TransformedType> {\n    return nothing()\n  }\n\n  public filter<Type>(_: never): Maybe<Type> {\n    return nothing()\n  }\n\n  public orDefault<DefaultType>(defaultValue: DefaultType): DefaultType {\n    return defaultValue\n  }\n\n  public orDefaultLazy<T>(callbackDefaultLazy: CallbackDefaultLazy<T>): T {\n    return callbackDefaultLazy()\n  }\n\n  public getSafe(): GetSafeReturn<never> {\n    return {\n      success: false,\n    }\n  }\n}\n\nexport function nothing(): Nothing {\n  return new Nothing()\n}\n","import type {\n  Callback,\n  CallbackChain,\n  CallbackPredicate,\n  GetSafeReturn,\n  Maybe,\n} from './maybe'\nimport { nothing } from './nothing'\n\nexport class Just<Type> implements Maybe<Type> {\n  constructor(private _value: Type) {}\n\n  private get value() {\n    return this._value\n  }\n\n  public isNothing(): boolean {\n    return false\n  }\n\n  public map<TransformedType>(\n    callbackMap: Callback<Type, TransformedType>,\n  ): Maybe<TransformedType> {\n    const result = callbackMap(this._value)\n    return this.isEmpty(result) ? nothing() : just(result)\n  }\n\n  private isEmpty(aValue: unknown): aValue is null | undefined {\n    return aValue === undefined || aValue === null\n  }\n\n  public filter<NextType extends Type>(\n    pred: CallbackPredicate<Type, NextType>,\n  ): Maybe<NextType> {\n    return pred(this.value) ? just(this.value) : nothing()\n  }\n\n  public chain<TransformedType>(\n    callbackChain: CallbackChain<Type, TransformedType>,\n  ): Maybe<TransformedType> {\n    const aNewMonad = callbackChain(this._value)\n    return this.isMonadValueIsEmpty(aNewMonad) ? nothing() : aNewMonad\n  }\n\n  private isMonadValueIsEmpty<TransformedType>(\n    aMonad: Maybe<TransformedType>,\n  ): boolean {\n    const result = aMonad.getSafe()\n    return result.success && this.isEmpty(result.data)\n  }\n\n  public orDefault(_: never): Type {\n    return this._value\n  }\n\n  public orDefaultLazy(_: never): Type {\n    return this._value\n  }\n\n  public getSafe(): GetSafeReturn<Type> {\n    return {\n      success: true,\n      data: this.value,\n    }\n  }\n}\n\nexport function just<Type>(value: Type): Maybe<Type> {\n  return new Just(value)\n}\n","import type { Maybe } from './maybe'\nimport { just } from './just'\nimport { nothing } from './nothing'\n\nexport default class MaybeImp {\n  public static of<Type>(value: Type): Maybe<Type> {\n    return just<Type>(value)\n  }\n\n  public static empty<Type>(): Maybe<Type> {\n    return nothing()\n  }\n}\n"],"mappings":"AAQO,IAAMA,EAAN,KAAwC,CACtC,WAA6B,CAClC,MAAO,EACT,CAEO,IACLC,EACwB,CACxB,OAAOC,EAAQ,CACjB,CAEO,MACLD,EACwB,CACxB,OAAOC,EAAQ,CACjB,CAEO,OAAaD,EAAuB,CACzC,OAAOC,EAAQ,CACjB,CAEO,UAAuBC,EAAwC,CACpE,OAAOA,CACT,CAEO,cAAiBC,EAAgD,CACtE,OAAOA,EAAoB,CAC7B,CAEO,SAAgC,CACrC,MAAO,CACL,QAAS,EACX,CACF,CACF,EAEO,SAASF,GAAmB,CACjC,OAAO,IAAIF,CACb,CCrCO,IAAMK,EAAN,KAAwC,CAC7C,YAAoBC,EAAc,CAAd,YAAAA,CAAe,CAEnC,IAAY,OAAQ,CAClB,OAAO,KAAK,MACd,CAEO,WAAqB,CAC1B,MAAO,EACT,CAEO,IACLC,EACwB,CACxB,IAAMC,EAASD,EAAY,KAAK,MAAM,EACtC,OAAO,KAAK,QAAQC,CAAM,EAAIC,EAAQ,EAAIC,EAAKF,CAAM,CACvD,CAEQ,QAAQG,EAA6C,CAC3D,OAA+BA,GAAW,IAC5C,CAEO,OACLC,EACiB,CACjB,OAAOA,EAAK,KAAK,KAAK,EAAIF,EAAK,KAAK,KAAK,EAAID,EAAQ,CACvD,CAEO,MACLI,EACwB,CACxB,IAAMC,EAAYD,EAAc,KAAK,MAAM,EAC3C,OAAO,KAAK,oBAAoBC,CAAS,EAAIL,EAAQ,EAAIK,CAC3D,CAEQ,oBACNC,EACS,CACT,IAAMP,EAASO,EAAO,QAAQ,EAC9B,OAAOP,EAAO,SAAW,KAAK,QAAQA,EAAO,IAAI,CACnD,CAEO,UAAUQ,EAAgB,CAC/B,OAAO,KAAK,MACd,CAEO,cAAcA,EAAgB,CACnC,OAAO,KAAK,MACd,CAEO,SAA+B,CACpC,MAAO,CACL,QAAS,GACT,KAAM,KAAK,KACb,CACF,CACF,EAEO,SAASN,EAAWO,EAA0B,CACnD,OAAO,IAAIZ,EAAKY,CAAK,CACvB,CCjEA,IAAqBC,EAArB,KAA8B,CAC5B,OAAc,GAASC,EAA0B,CAC/C,OAAOC,EAAWD,CAAK,CACzB,CAEA,OAAc,OAA2B,CACvC,OAAOE,EAAQ,CACjB,CACF","names":["Nothing","_","nothing","defaultValue","callbackDefaultLazy","Just","_value","callbackMap","result","nothing","just","aValue","pred","callbackChain","aNewMonad","aMonad","_","value","MaybeImp","value","just","nothing"]}